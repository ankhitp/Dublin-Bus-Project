function initMap() {    var pos;    directionsService = new google.maps.DirectionsService();    directionsDisplay = new google.maps.DirectionsRenderer();    // The location of Dublin    var dublin = {lat: 53.33306, lng: -6.24889};    // The map, centered at Uluru    var im = {        url: '../static/img/userLoc.png', // url        scaledSize: new google.maps.Size(40, 40), // scaled size        origin: new google.maps.Point(0, 0), // origin        anchor: new google.maps.Point(0, 0) // anchor    };    map = new google.maps.Map(document.getElementById('map'), {        zoom: 14,        center: dublin,        mapTypeControl: false,    });    directionsDisplay.setMap(map);    //uses the Google geolocation service    if (navigator.geolocation) {        navigator.geolocation.getCurrentPosition(function (position) {            pos = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);            var marker = new google.maps.Marker({                position: pos,                map: map,                icon: im            });            map.setCenter(pos);        });    }    autocompSearchBar();    setAutocomplete();    // The marker, positioned at Uluru    addMarker(map);}/** * This function sets up the autocomplete for the origin and destination fields */function setAutocomplete() {    var originInput = document.getElementById('origin-input');    var destinationInput = document.getElementById('destination-input');    //define a center and circle for our autocomplete search, this makes it so that it's biased toward this area when    //searching for a place name    var center = new google.maps.LatLng(53.33306, -6.24889);    var circle = new google.maps.Circle({        center: center,        radius: 10000    });    //setting up the autcomplete and adding the bound circle of 10KM for suggestions    var originAutocomplete = new google.maps.places.Autocomplete(originInput);    var destinationAutocomplete = new google.maps.places.Autocomplete(destinationInput);    originAutocomplete.setBounds(circle.getBounds());    destinationAutocomplete.setBounds(circle.getBounds());    this.setupPlaceChangedListener(originAutocomplete, 'ORIG');    this.setupPlaceChangedListener(destinationAutocomplete, 'DEST');    var marker = new google.maps.Marker({position: dublin, map: map});}/** * This sets up the main search bar's autocomplete */function autocompSearchBar() {    var infowindow = new google.maps.InfoWindow();    var input = document.getElementById('pac-input');    var searchBox = new google.maps.places.SearchBox(input);    map.addListener('bounds_changed', function () {        searchBox.setBounds(map.getBounds());    });    // Listen for the event fired when the user selects a prediction and retrieve    // more details for that place.    searchBox.addListener('places_changed', function () {        var places = searchBox.getPlaces();        if (places.length == 0) {            return;        }        // Clear out the old markers.        markers.forEach(function (marker) {            marker.setMap(null);        });        newMarkers = [];        // For each place, get the icon, name and location.        var bounds = new google.maps.LatLngBounds();        places.forEach(function (place) {            if (!place.geometry) {                console.log("Returned place contains no geometry");                return;            }            var icon = {                url: place.icon,                size: new google.maps.Size(142, 142),                origin: new google.maps.Point(0, 0),                anchor: new google.maps.Point(17, 34),                scaledSize: new google.maps.Size(50, 50)            };            var location = document.getElementById("pac-input").value;            myMark = new google.maps.Marker({                map: map,                icon: icon,                title: place.name,                position: place.geometry.location,                content: '<button onclick = "routeToHere(\'' + location + '\')" class = "btn-primary">Route to here</button></div>'            });            // Create a marker for each place.            newMarkers.push(myMark);            if (place.geometry.viewport) {                // Only geocodes have viewport.                bounds.union(place.geometry.viewport);            } else {                bounds.extend(place.geometry.location);            }            google.maps.event.addListener(myMark, 'click', (function (myMark) {                return function () {                    infowindow.setContent(myMark.content);                    infowindow.open(map, myMark);                }            })(myMark));        });        map.fitBounds(bounds);    });}function addMarker(map) {    for (var i = 0, length = data.length; i < length; i++) {        var busdata = data[i];        var myLatLng = {lat: parseFloat(busdata.stop_lat), lng: parseFloat(busdata.stop_lon)};        // Creating  markers and putting it on the map        // {#var image = 'https://image.flaticon.com/icons/svg/164/164955.svg';#}        // {#var image = "{% static '../../static/img/bus.png' %}";#}        var marker = new google.maps.Marker({            position: myLatLng,            map: map,            title: busdata.actual_stop_id + "\n" + busdata.stop_name,            // {#icon: image,#}        });    }}/** * Sets the starting point to the marker clicked * @param data is the name of the station clicked on */function routeFromHere(data) {    document.getElementById('origin-input').value = data;}/** * Routes from the current location of the user to the selected marker * * @param location which is the location of the stop */function routeToHere(location) {    var pos;    if (navigator.geolocation) {        navigator.geolocation.getCurrentPosition(function (position) {            pos = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);            map.setCenter(pos);            var geocoder = new google.maps.Geocoder;            var lat = position.coords.latitude;            var long = position.coords.longitude;            var latlngStr = lat.toString() + "," + long.toString();            latlngStr = latlngStr.split(',', 2);            var latlng = {lat: parseFloat(latlngStr[0]), lng: parseFloat(latlngStr[1])};            geocoder.geocode({'location': latlng}, function (results, status) {                if (status === 'OK') {                    var start = results[0].formatted_address;                    getLatLng(start, location);                } else {                    alert("Something went wrong. Try again!")                }            });        }, function () {            handleLocationError(true, LocationWindow, map.getCenter());        });    } else {        // Browser doesn't support Geolocation        handleLocationError(false, LocationWindow, map.getCenter());    }    function handleLocationError(browserHasGeolocation, LocationWindow, pos) {        LocationWindow.setPosition(pos);        LocationWindow.setContent(browserHasGeolocation ?            'Error: The Geolocation service failed.' :            'Error: Your browser doesn\'t support geolocation.');        LocationWindow.open(map);    }}//removes line created for routefunction removeLine() {    for (var i = 0; i < polylines.length; ++i) {        polylines[i].setMap(null);    }    polylines = [];    return false;}function clearMarkers() {    setMapOnAll(null);}function setMapOnAll(map) {    for (var i = 0; i < markers.length; i++) {        markers[i].setMap(map);    }}//CALL THIS TO REMOVE MARKERS FROM MAP, IT USES THE OTHER MARKER RELATED FUNCTIONS!function deleteMarkers() {    clearMarkers();    markers = [];}//sets the map back to original position, resets the side bar to the 'search dublin' optionfunction resetMap() {    document.getElementById('directions').style.display = "none";    document.getElementById('coTwo').innerHTML = "";    document.getElementById('options').style.width = '300px';    document.getElementById('options').style.height = "200px";    document.getElementById('options').innerHTML =        "<div id = 'journeyPlan' style = 'display:none'>\n" +        "            <h3 style=\"text-align: center\">Start your journey here!</h3>\n" +        "            <br>\n" +        "            <h4 style=\"text-align: center\">Enter a start and end location!</h4>\n" +        "\n" +        "            <div style=\"text-align: center\">\n" +        "\n" +        "                <input autocomplete=\"off\" class=\"controls\" id=\"origin-input\" placeholder=\"Enter an origin location\"\n" +        "                       type=\"text\">\n" +        "\n" +        "                <input autocomplete=\"off\" class=\"controls\" id=\"destination-input\" placeholder=\"Enter a destination location\"\n" +        "                       type=\"text\">\n" +        "\n" +        "            </div>\n" +        "            <br>\n" +        "            <div style=\"text-align: center\">\n" +        "                <button class='btn btn-primary' id=\"directionsButton\" onclick=\"resizeMap()\" type=\"submit\">Search\n" +        "                </button>\n" +        "            </div>\n" +        "            <br>\n" +        "            <div style=\"text-align: center\">\n" +        "                <button class='btn btn-primary' id=\"locationButton\" onclick=\"findLocation()\" type=\"submit\">Find Stations\n" +        "                    Near Me!\n" +        "                </button>\n" +        "            </div>\n" +        "            <br>\n" +        "            <br>\n" +        "            <br>\n" +        "            <div style=\"text-align: center\">\n" +        "                <button class='btn btn-primary' onclick=\"hideOptions()\" type=\"submit\">Hide Options ^</button>\n" +        "            </div>\n" +        "        </div>\n" +        "        <div id = 'searchOnly' style = 'display:block'>\n" +        "            <div style=\"text-align: center\">\n" +        "            <h3>Search for a place in Dublin to visit!</h3>\n" +        "                <input autocomplete=\"off\" class=\"controls\" id=\"pac-input\" placeholder=\"Search Dublin\" type=\"text\" autocomplete = 'off'>\n" +        "                <br>\n" +        "                <br>\n" +        "                <button class='btn btn-primary' onclick=\"showOptions()\" type=\"submit\">Show Journey Planner</button>\n" +        "            </div>\n" +        "</div>";    autocompSearchBar();    setAutocomplete();}//resizes map for directions on the right sidefunction resizeMap() {    deleteMarkers();    var start = document.getElementById('origin-input').value;    var end = document.getElementById('destination-input').value;    if (start == "" || end == "") {        document.getElementById("options").innerHTML = "<h4 style = 'text-align: center'>Please enter a start and end location!</h4>" +            "<div style = 'text-align: center'>" +            "<br> <br> <button class='btn btn-primary' id = 'directionsButton'  type='submit' onclick = 'resetMap()'>Try Again</button> " +            "</div>";    } else {        document.getElementById('options').style.width = "500px";        getLatLng(start, end);    }}//resizes map for directions on the right sidefunction mobileResizeMap() {    deleteMarkers();    var start = document.getElementById('origin-input').value;    var end = document.getElementById('destination-input').value;    if (start == "" || end == "") {        document.getElementById("header").innerHTML = "<h4 style = 'text-align: center'>Please enter a start and end location!</h4>" +            "<div style = 'text-align: center'>" +            "<br> <br> <button class='btn btn-primary' id = 'directionsButton'  type='submit' onclick = 'createHeader(); setAutocomplete()'>Try Again</button> " +            "</div>";    } else {        document.getElementById('header').innerHTML =            "<div style = 'text-align: center'>\n" +            "            <input autocomplete=\"off\" class=\"controls\" id=\"origin-input\"\n" +            "                   placeholder=\"Enter an origin location\" type=\"text\">\n" +            "        </div>\n" +            "        <div style = 'text-align: center'>\n" +            "            <input autocomplete=\"off\" class=\"controls\" id=\"destination-input\"\n" +            "                   placeholder=\"Enter a destination location\" type=\"text\" >\n" +            "        </div>";        document.getElementById('origin-input').value = start;        document.getElementById('destination-input').value = end;        document.getElementById('routes').style.display = 'block';        mobileGetLatLng(start, end);    }}function mobileResetMap() {    document.getElementById('routes').style.display = 'none';    document.getElementById('map').style.display = 'block';    createHeader();    setAutocomplete();}function createHeader() {    document.getElementById('header').innerHTML =        '<div id = "header" class = "col-12">\n' +        '    <h3 style="text-align: center">Start your journey here</h3>\n' +        '    <br>\n' +        '    <h4 style="text-align: center">Enter a start and end location</h4>\n' +        '    <div style = \'text-align: center\'>\n' +        '        <input autocomplete="off" class="controls" id="origin-input"\n' +        '               placeholder="Enter an origin location" type="text" onchange ="placeMarker(1, document.getElementById(\'origin-input\').value)">\n' +        '    </div>\n' +        '    <div style = \'text-align: center\'>\n' +        '        <input autocomplete="off" class="controls" id="destination-input"\n' +        '               placeholder="Enter a destination location" type="text" onchange ="placeMarker(2, document.getElementById(\'destination-input\').value); ">\n' +        '    </div>\n' +        '    <div style="text-align: center">\n' +        '        <button class=\'btn btn-primary\' id="directionsButton" onclick="mobileResizeMap()" type="submit">Search\n' +        '        </button>\n' +        '    </div>\n' +        '</div>'}function mobileMapReturnHide() {    document.getElementById('map').style.display = "none";    document.getElementById('return').innerHTML = "";}function showOptions() {    document.getElementById('searchOnly').style = 'display:none';    document.getElementById('options').style.height = "auto";    document.getElementById('journeyPlan').style = 'display:block';}function hideOptions() {    document.getElementById('journeyPlan').style = 'display:none';    document.getElementById('options').style.height = "200px";    document.getElementById('searchOnly').style = 'display:block';}// Snap a user-created polyline to roads and draw the snapped pathfunction runSnapToRoad(path) {    var pathValues = [];    for (var i = 0; i < path.getLength(); i++) {        pathValues.push(path.getAt(i).toUrlValue());    }    $.get('https://roads.googleapis.com/v1/snapToRoads', {        interpolate: true,        key: 'AIzaSyC-hR-mSsuP9TGDFilrtWVmxNR_t1i-qYo',        path: pathValues.join('|')    }, function (data) {        processSnapToRoadResponse(data);        drawSnappedPolyline();    });}// Store snapped polyline returned by the snap-to-road service.function processSnapToRoadResponse(data) {    snappedCoordinates = [];    placeIdArray = [];    for (var i = 0; i < data.snappedPoints.length; i++) {        var latlng = new google.maps.LatLng(            data.snappedPoints[i].location.latitude,            data.snappedPoints[i].location.longitude);        snappedCoordinates.push(latlng);        placeIdArray.push(data.snappedPoints[i].placeId);    }}// Draws the snapped polyline (after processing snap-to-road response).function drawSnappedPolyline() {    var snappedPolyline = new google.maps.Polyline({        path: snappedCoordinates,        strokeColor: 'black',        strokeWeight: 3    });    snappedPolyline.setMap(map);    polylines.push(snappedPolyline);}// this function calls realtime api to get the real time infofunction get_real_time_data(id) {    if (document.getElementById('realtime' + id) == null) {        getJSON('https://data.smartdublin.ie/cgi-bin/rtpi/realtimebusinformation?stopid=' + id + '&format=json', function (err, datainfo) {            // realtime table head            var texthead = `<h6 style = "padding-left : 1%; font-size:15px; padding-top: 2%">Stop: ${datainfo.stopid}</h6>                            <p style = "padding-left : 1%;font-family:Tangerine; font-size:15px;">Data Refreshed at: ${datainfo.timestamp}</p>`            var text = `<table  style=" width:100%;  margin: auto; text-align: center; border: 1px solid black;border-collapse: collapse">                            <tr>                             <th style=" border: 1px solid #ddd; width: 20%;font-family:Tangerine; color: white;font-size:12px; background-color: #1C6EA4"; >Bus</th>                            <th style=" border: 1px solid #ddd; width: 50%;font-family:Tangerine; color: white;font-size:12px; background-color: #1C6EA4">Destination</th>                            <th style=" border: 1px solid #ddd; width: 30%;font-family:Tangerine; color: white;font-size:12px; background-color: #1C6EA4">Due</th>                            </tr></table>                            `            var content = "";            for (var i = 0, length = datainfo.results.length; i < length; i++) {                if (datainfo.results[i].duetime == 1) {                    var minute = "min";                } else if (datainfo.results[i].duetime == 'Due') {                    minute = "";                } else {                    minute = "mins";                }                // show realtime content                content += `<table style=" width: 100%; margin: auto; text-align: center; border: 1px solid black; border-collapse: collapse">                    <tr><td style=" border: 1px solid #ddd; width: 20%;font-family:Tangerine; font-size:12px;">${datainfo.results[i].route}</td>                    <td style=" border: 1px solid #ddd; width: 50%;font-family:Tangerine; font-size:12px;">${datainfo.results[i].destination}</td>                    <td style=" border: 1px solid #ddd; width: 30%;font-family:Tangerine; font-size:12px;">${datainfo.results[i].duetime}${minute}</td>                    </tr></table>`            }            document.getElementById("stop" + id).style.display = 'none';            $('#content' + id).append('<div id="realtime' + id + '">' + texthead + text + content + "</div>");            document.getElementById("realtime_p").innerHTML = "<img src='../static/img/back-icon.png' alt='back-icon' style='width: 10px; height: 10px'>";        });    } else if (document.getElementById("stop" + id).style.display === 'none') {        document.getElementById("stop" + id).style.display = 'block';        document.getElementById("realtime" + id).style.display = 'none';        document.getElementById("realtime_p").innerText = "Real Time Info";    } else {        document.getElementById("stop" + id).style.display = 'none';        document.getElementById("realtime" + id).style.display = 'block';        document.getElementById("realtime_p").innerHTML = "<img src='../static/img/back-icon.png' alt='back-icon' style='width: 10px; height: 10px'>";    }}var getJSON = function (url, callback) {    var xhr = new XMLHttpRequest();    xhr.open('GET', url, true);    xhr.responseType = 'json';    xhr.onload = function () {        var status = xhr.status;        if (status == 200) {            callback(null, xhr.response);        } else {            callback(status);        }    };    xhr.send();};